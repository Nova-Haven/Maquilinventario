import $ from"jquery";import"datatables.net-buttons";import"datatables.net-buttons-dt";import"datatables.net-buttons/js/buttons.html5.min.js";import{handleError}from"./utils/utils.min.js";import DataTable from"datatables.net-dt";import{auth}from"./fb.js";async function loadInventory(){try{const loadingMessage=document.getElementById("loadingMessage");if(loadingMessage){try{loadingMessage.innerHTML='<img src="/assets/loading.gif" alt="Cargando..." /> Cargando...'}catch(error){loadingMessage.textContent="Cargando...",console.warn("Loading image could not be displayed:",error)}loadingMessage.style.display="block"}const[{extractName:extractName,extractPeriod:extractPeriod,extractInventoryData:extractInventoryData,extractTotals:extractTotals},{displayInventoryTable:displayInventoryTable}]=await Promise.all([import("./utils/excelite.min.js"),import("./display/inventory.min.js")]),response=await fetch(`assets/${import.meta.env.VITE_INVENTORY_FILE}`);if(!response.ok)throw new Error("No se pudo cargar el archivo Excel");const arrayBuffer=await response.arrayBuffer(),data=new Uint8Array(arrayBuffer),workbook=XLSX.read(data,{type:"array"}),sheet=workbook.Sheets[workbook.SheetNames[0]];displayInventoryTable({name:extractName(sheet),period:extractPeriod(sheet),data:extractInventoryData(sheet),totals:extractTotals(sheet)})}catch(error){handleError(error,"Error al cargar los datos")}finally{const loadingMessage=document.getElementById("loadingMessage");loadingMessage&&(loadingMessage.style.display="none",loadingMessage.innerHTML="")}}async function loadCatalog(){try{const loadingMessage=document.getElementById("loadingMessage");if(loadingMessage){try{loadingMessage.innerHTML='<img src="/assets/loading.gif" alt="Cargando..." /> Cargando...'}catch(error){loadingMessage.textContent="Cargando...",console.warn("Loading image could not be displayed:",error)}loadingMessage.style.display="block"}const[{extractCatalogData:extractCatalogData},{displayCatalogTable:displayCatalogTable}]=await Promise.all([import("./utils/excelite.min.js"),import("./display/catalog.min.js")]),response=await fetch(`/assets/${import.meta.env.VITE_CATALOG_FILE}`);if(!response.ok)throw new Error("No se pudo cargar el catálogo");const arrayBuffer=await response.arrayBuffer(),data=new Uint8Array(arrayBuffer),workbook=XLSX.read(data,{type:"array"}),sheet=workbook.Sheets[workbook.SheetNames[0]];displayCatalogTable(extractCatalogData(sheet))}catch(error){handleError(error,"Error al cargar los datos del catálogo")}finally{const loadingMessage=document.getElementById("loadingMessage");loadingMessage&&(loadingMessage.style.display="none",loadingMessage.innerHTML="")}}async function loadUpload(){const tableContainer=document.getElementById("tableContainer");if(!tableContainer)return console.error("Table container not found for upload view."),void handleError(new Error("UI component missing"),"Error al preparar la vista de carga.");const expectedInventoryFile=import.meta.env.VITE_INVENTORY_FILE,expectedCatalogFile=import.meta.env.VITE_CATALOG_FILE,response=await fetch("/pages/upload.html");if(!response.ok)return void handleError(new Error(`Failed to load upload form: ${response.statusText}`),"Error al cargar formulario de subida");let htmlContent=await response.text();htmlContent=htmlContent.replace(/\$\{expectedInventoryFile\}/g,expectedInventoryFile),htmlContent=htmlContent.replace(/\$\{expectedCatalogFile\}/g,expectedCatalogFile),tableContainer.innerHTML=htmlContent;const inventoryFileInput=document.getElementById("inventoryFile"),catalogFileInput=document.getElementById("catalogFile"),submitButton=document.getElementById("submitUploadButton"),feedbackDiv=document.getElementById("uploadFeedback"),uploadLoadingMessage=document.getElementById("uploadLoadingMessage");submitButton&&(submitButton.textContent="Validar y Subir Archivos para Actualizar Sitio"),document.querySelector("#tab").textContent="Actualizar Archivos (Automático)";const currentTitle=document.title;if(currentTitle.includes("|")){const company=currentTitle.split("|")[1].trim();document.title=`Actualizar Archivos (Automático) | ${company}`}else document.title="Actualizar Archivos (Automático)";const periodEl=document.getElementById("period");periodEl&&(periodEl.textContent="");const titleEl=document.getElementById("title");function showFeedback(message,isError=!1,isInstructions=!1){feedbackDiv.innerHTML=message,feedbackDiv.className=isError?"feedback-message error":isInstructions?"feedback-message instructions":"feedback-message success",feedbackDiv.style.backgroundColor=isError?"#f8d7da":isInstructions?"#e0e0e0":"#d4edda",feedbackDiv.style.color=isError?"#721c24":isInstructions?"#333":"#155724",feedbackDiv.style.borderColor=isError?"#f5c6cb":isInstructions?"#ccc":"#c3e6cb",feedbackDiv.style.display="block",feedbackDiv.style.textAlign=isInstructions?"left":"center",isInstructions&&(feedbackDiv.style.padding="15px",feedbackDiv.style.lineHeight="1.6")}titleEl&&(titleEl.textContent="Administración de Archivos"),submitButton.addEventListener("click",(async()=>{feedbackDiv.style.display="none",uploadLoadingMessage.style.display="block",submitButton.disabled=!0,submitButton.style.opacity="0.7";const inventoryFile=inventoryFileInput.files[0],catalogFile=catalogFileInput.files[0];let validationError=!1;if(inventoryFile?inventoryFile.name!==expectedInventoryFile?(showFeedback(`El archivo de inventario debe llamarse "${expectedInventoryFile}". Archivo seleccionado: "${inventoryFile.name}"`,!0),validationError=!0):inventoryFile.name.endsWith(".xlsx")||(showFeedback("El archivo de inventario debe ser de tipo .xlsx.",!0),validationError=!0):(showFeedback("Por favor, seleccione el archivo de inventario.",!0),validationError=!0),validationError||(catalogFile?catalogFile.name!==expectedCatalogFile?(showFeedback(`El archivo de catálogo debe llamarse "${expectedCatalogFile}". Archivo seleccionado: "${catalogFile.name}"`,!0),validationError=!0):catalogFile.name.endsWith(".xls")||(showFeedback("El archivo de catálogo debe ser de tipo .xls.",!0),validationError=!0):(showFeedback("Por favor, seleccione el archivo de catálogo.",!0),validationError=!0)),validationError)return uploadLoadingMessage.style.display="none",submitButton.disabled=!1,void(submitButton.style.opacity="1");uploadLoadingMessage.innerHTML='<img src="/assets/loading.gif" alt="Procesando..." width="24" style="vertical-align: middle; margin-right: 8px;" /> Procesando y subiendo archivos...',uploadLoadingMessage.style.display="block";try{const currentUser=auth.currentUser;if(!currentUser)return showFeedback("Error de autenticación: No se pudo obtener el usuario actual. Por favor, recargue la página e intente de nuevo.",!0),uploadLoadingMessage.style.display="none",submitButton.disabled=!1,void(submitButton.style.opacity="1");const idToken=await currentUser.getIdToken(!0),formData=new FormData;formData.append("inventoryFile",inventoryFile,expectedInventoryFile),formData.append("catalogFile",catalogFile,expectedCatalogFile);const dockerServerEndpoint=`${import.meta.env.VITE_DOCKER_SERVER_ENDPOINT}/api/update-excel-files`;showFeedback("Enviando archivos al servidor para actualización automática. Esto puede tardar unos momentos...",!1,!0);const uploadResponse=await fetch(dockerServerEndpoint,{method:"POST",headers:{Authorization:`Bearer ${idToken}`},body:formData});if(uploadLoadingMessage.style.display="none",!uploadResponse.ok){const errorData=await uploadResponse.json().catch((()=>({message:"Error desconocido del servidor."})));throw new Error(`Error del servidor (${uploadResponse.status}): ${errorData.message||uploadResponse.statusText}`)}showFeedback((await uploadResponse.json()).message||"Archivos procesados y sitio web en proceso de actualización. Puede tardar unos minutos en reflejarse.",!1),inventoryFileInput.value="",catalogFileInput.value=""}catch(error){console.error("Error during automated upload process:",error),showFeedback(`Error al intentar actualizar automáticamente: ${error.message}`,!0),uploadLoadingMessage.style.display="none"}finally{submitButton.disabled=!1,submitButton.style.opacity="1"}}))}$.DataTable=DataTable;export{loadInventory,loadCatalog,loadUpload};