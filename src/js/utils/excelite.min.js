const XLSX=window.XLSX;function extractPeriod(sheet){const matches=((sheet.A4||{}).v||"").match(/Del: (.*?) Al: (.*?)$/);return{start:matches?.[1]||"",end:matches?.[2]||""}}function extractName(sheet){return(sheet.C1||{}).v||""}function extractInventoryData(sheet){const data=XLSX.utils.sheet_to_json(sheet,{header:1}),notesStartIndex=data.findIndex(((row,index)=>index>8&&row[1]&&row[1].toString().startsWith("(1)")));return{mainData:data.slice(7,notesStartIndex).map((row=>({producto:row[1],nombre:row[2],metodo_costeo:row[3]?.replace(/^Costo\s+/i,"")||"",unidades:{inventario_inicial:row[5],entradas:row[6],salidas:row[7],existencia:row[8]},importes:{inventario_inicial:row[9],entradas:row[10],salidas:row[11],inventario_final:row[12]},error:row[13]}))).filter((row=>row.producto)),notes:data.slice(notesStartIndex).filter((row=>row[1])).map((row=>row[1]))}}function extractCatalogData(sheet){const data=XLSX.utils.sheet_to_json(sheet,{header:1});return{headers:data[2]||[],items:data.slice(3).filter((row=>row.length>0&&row[0])).map((row=>({codigo:row[0]||"",nombre:row[1]||"",precio:row[2]||0,fraccion:row[3]||"",descripcion:row[4]||"",fraccion2:row[5]||"",observaciones:row[6]||""})))}}function extractTotals(sheet){const data=XLSX.utils.sheet_to_json(sheet,{header:1}),lastDataIndex=data.findIndex(((row,index)=>index>8&&(!row[1]||""===row[1]))),totalsRow=data[lastDataIndex];return totalsRow?{unidades:{inventario_inicial:totalsRow[5],entradas:totalsRow[6],salidas:totalsRow[7],existencia:totalsRow[8]},importes:{inventario_inicial:totalsRow[9],entradas:totalsRow[10],salidas:totalsRow[11],inventario_final:totalsRow[12]}}:null}export{extractPeriod,extractName,extractInventoryData,extractCatalogData,extractTotals};