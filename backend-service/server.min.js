const express=require("express"),cors=require("cors"),multer=require("multer"),admin=require("firebase-admin"),{Octokit:Octokit}=require("@octokit/rest"),fs=require("fs"),path=require("path"),PORT=process.env.PORT||3e3,GITHUB_PAT=process.env.GITHUB_PAT,GITHUB_OWNER=process.env.GITHUB_OWNER,GITHUB_REPO=process.env.GITHUB_REPO,FIREBASE_SERVICE_ACCOUNT_PATH=process.env.FIREBASE_SERVICE_ACCOUNT_PATH,FIREBASE_PROJECT_ID=process.env.FIREBASE_PROJECT_ID,FRONTEND_ORIGIN=process.env.FRONTEND_ORIGIN;GITHUB_PAT&&GITHUB_OWNER&&GITHUB_REPO&&FIREBASE_SERVICE_ACCOUNT_PATH&&FIREBASE_PROJECT_ID&&FRONTEND_ORIGIN||(console.error("FATAL ERROR: Missing one or more required environment variables."),process.exit(1));try{const serviceAccount=require(FIREBASE_SERVICE_ACCOUNT_PATH);admin.initializeApp({credential:admin.credential.cert(serviceAccount)}),console.log("Firebase Admin SDK initialized successfully.")}catch(error){console.error("Error initializing Firebase Admin SDK:",error.message),console.error("Ensure FIREBASE_SERVICE_ACCOUNT_PATH is correct and the file exists:",FIREBASE_SERVICE_ACCOUNT_PATH),process.exit(1)}let octokit;try{octokit=new Octokit({auth:GITHUB_PAT}),console.log("Octokit initialized successfully.")}catch(error){console.error("Error initializing Octokit:",error.message),console.error("Ensure GITHUB_PAT is correct and has the necessary permissions."),process.exit(1)}const app=express();let upload;try{const storage=multer.memoryStorage();upload=multer({storage:storage,limits:{fileSize:10485760}}),console.log("Multer initialized successfully.")}catch(error){console.error("Error setting up Multer:",error.message),process.exit(1)}console.log(`CORS: Allowing requests from origin: ${FRONTEND_ORIGIN}`);const corsOptions={origin:FRONTEND_ORIGIN,methods:["POST","OPTIONS"],allowedHeaders:["Content-Type","Authorization"],credentials:!0};app.use(cors(corsOptions));try{app.use(express.json()),console.log("JSON parsing middleware set up.")}catch(error){console.error("Error setting up JSON parsing middleware:",error.message),process.exit(1)}async function firebaseAuthMiddleware(req,res,next){const authHeader=req.headers.authorization;if(!authHeader||!authHeader.startsWith("Bearer "))return res.status(401).json({message:"Unauthorized: No token provided."});const idToken=authHeader.split("Bearer ")[1];try{const decodedToken=await admin.auth().verifyIdToken(idToken);if(console.log("FIREBASE_PROJECT_ID:",FIREBASE_PROJECT_ID),console.log("decodedToken.aud:",decodedToken.aud),decodedToken.aud!==FIREBASE_PROJECT_ID)return res.status(401).json({message:"Unauthorized: Invalid token (audience mismatch)."});const userRole=decodedToken.role;if("admin"!==userRole&&"upload"!==userRole)return res.status(403).json({message:"Forbidden: Insufficient permissions."});req.user=decodedToken,next()}catch(error){return console.error("Error verifying Firebase ID token:",error),res.status(401).json({message:"Unauthorized: Invalid token.",error:error.message})}}try{app.post("/api/update-excel-files",firebaseAuthMiddleware,upload.fields([{name:"inventoryFile",maxCount:1},{name:"catalogFile",maxCount:1}]),(async(req,res)=>{if(!req.files||!req.files.inventoryFile||!req.files.catalogFile)return res.status(400).json({message:"Bad Request: Both inventory and catalog files are required."});const inventoryFile=req.files.inventoryFile[0],catalogFile=req.files.catalogFile[0],expectedInventoryFilename=inventoryFile.originalname,expectedCatalogFilename=catalogFile.originalname;if(console.log(`Received inventory file: ${inventoryFile.originalname} (expected: ${expectedInventoryFilename})`),console.log(`Received catalog file: ${catalogFile.originalname} (expected: ${expectedCatalogFilename})`),!expectedInventoryFilename.endsWith(".xlsx"))return res.status(400).json({message:"Invalid inventory file type. Expected .xlsx"});if(!expectedCatalogFilename.endsWith(".xls"))return res.status(400).json({message:"Invalid catalog file type. Expected .xls"});try{const filesToUpdate=[{path:`public/assets/${expectedInventoryFilename}`,contentBuffer:inventoryFile.buffer},{path:`public/assets/${expectedCatalogFilename}`,contentBuffer:catalogFile.buffer}],commitMessage=`Automated update of Excel files by ${req.user.email||req.user.uid}`,{data:refData}=await octokit.rest.git.getRef({owner:GITHUB_OWNER,repo:GITHUB_REPO,ref:"heads/main"}),latestCommitSha=refData.object.sha,{data:commitData}=await octokit.rest.git.getCommit({owner:GITHUB_OWNER,repo:GITHUB_REPO,commit_sha:latestCommitSha}),baseTreeSha=commitData.tree.sha,newTreeEntries=[];for(const file of filesToUpdate){const{data:blobData}=await octokit.rest.git.createBlob({owner:GITHUB_OWNER,repo:GITHUB_REPO,content:file.contentBuffer.toString("base64"),encoding:"base64"});newTreeEntries.push({path:file.path,mode:"100644",type:"blob",sha:blobData.sha}),console.log(`Created blob for ${file.path} with SHA ${blobData.sha}`)}const{data:newTreeData}=await octokit.rest.git.createTree({owner:GITHUB_OWNER,repo:GITHUB_REPO,base_tree:baseTreeSha,tree:newTreeEntries});console.log(`Created new tree with SHA ${newTreeData.sha}`);const{data:newCommitData}=await octokit.rest.git.createCommit({owner:GITHUB_OWNER,repo:GITHUB_REPO,message:commitMessage,tree:newTreeData.sha,parents:[latestCommitSha]});console.log(`Created new commit with SHA ${newCommitData.sha}`),await octokit.rest.git.updateRef({owner:GITHUB_OWNER,repo:GITHUB_REPO,ref:"heads/main",sha:newCommitData.sha}),console.log(`Updated ref heads/main to ${newCommitData.sha}`),res.status(200).json({message:"Files successfully uploaded and committed to GitHub. Site update triggered."})}catch(error){console.error("Error processing files or committing to GitHub:",error),error.status&&console.error("GitHub API Error Details:",error.response?.data),res.status(500).json({message:"Failed to update files on GitHub.",error:error.message})}}))}catch(error){console.error("Error setting up API endpoint:",error.message),process.exit(1)}try{app.listen(PORT,(()=>{console.log(`Backend server listening on port ${PORT}`),console.log(`Accepting requests from origin: ${FRONTEND_ORIGIN}`)}))}catch(error){console.error("Error starting server:",error.message),process.exit(1)}