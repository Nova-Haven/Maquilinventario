import{writeFileSync,existsSync,mkdirSync}from"fs";import{createHash}from"crypto";function ensureDirectories(){existsSync("./public")||mkdirSync("./public",{recursive:!0}),existsSync("./public/assets")||mkdirSync("./public/assets",{recursive:!0})}const NUM_CHUNKS_ENV=process.env.NUM_CHUNKS;NUM_CHUNKS_ENV||(console.error(JSON.stringify({error:"Missing NUM_CHUNKS environment variable.",success:!1})),process.exit(1));const NUM_CHUNKS=parseInt(NUM_CHUNKS_ENV,10);(isNaN(NUM_CHUNKS)||NUM_CHUNKS<=0)&&(console.error(JSON.stringify({error:`Invalid NUM_CHUNKS environment variable: ${NUM_CHUNKS_ENV}. Must be a positive integer.`,success:!1})),process.exit(1));const fileProcessingConfigs=[{type:"inventory",prefix:"INVENTORY_FILE",envFilenameVar:"VITE_INVENTORY_FILE"},{type:"catalog",prefix:"CATALOG_FILE",envFilenameVar:"VITE_CATALOG_FILE"}];try{ensureDirectories();const overallResults=[];for(const config of fileProcessingConfigs){const{type:type,prefix:prefix,envFilenameVar:envFilenameVar}=config,filename=process.env[envFilenameVar];if(!filename){const message=`Skipping ${type} file: Environment variable ${envFilenameVar} for filename is not set.`;console.warn(JSON.stringify({warning:message,type:type})),overallResults.push({type:type,success:!1,status:"skipped",reason:message});continue}const base64Chunks=[];let allChunksForCurrentFilePresent=!0;for(let i=1;i<=NUM_CHUNKS;i++){const chunkEnvVar=`${prefix}_CHUNK_${i}`,chunk=process.env[chunkEnvVar];if(!chunk){const errorMessage=`Missing chunk for ${type} file: ${chunkEnvVar}`;console.error(JSON.stringify({error:errorMessage,success:!1,type:type})),overallResults.push({type:type,success:!1,status:"error",reason:errorMessage}),allChunksForCurrentFilePresent=!1;break}base64Chunks.push(chunk)}if(!allChunksForCurrentFilePresent)continue;if(0===base64Chunks.length){const message=`No chunks found to process for ${type} file (${filename}), though filename was provided. NUM_CHUNKS: ${NUM_CHUNKS}.`;console.warn(JSON.stringify({warning:message,type:type})),overallResults.push({type:type,success:!1,status:"skipped",reason:message});continue}const buffers=base64Chunks.map((chunk=>Buffer.from(chunk,"base64"))),combinedBuffer=Buffer.concat(buffers),hash=createHash("sha256").update(combinedBuffer).digest("hex"),outputPath=`./public/assets/${filename}`;writeFileSync(outputPath,combinedBuffer),overallResults.push({success:!0,status:"processed",type:type,path:outputPath,size:combinedBuffer.length,hash:hash})}const processedCount=overallResults.filter((r=>"processed"===r.status)).length,erroredCount=overallResults.filter((r=>"error"===r.status)).length;0===processedCount&&overallResults.length>0?(console.error(JSON.stringify({error:"No files were successfully processed. Check logs and environment variable configuration.",success:!1,details:overallResults})),process.exit(1)):0===processedCount&&0===overallResults.length?console.warn(JSON.stringify({warning:"No file configurations found (e.g., VITE_INVENTORY_FILE or VITE_CATALOG_FILE not set). No files processed.",success:!0,details:overallResults})):console.log(JSON.stringify({overallSuccess:0===erroredCount,processedCount:processedCount,details:overallResults}))}catch(error){console.error(JSON.stringify({error:error.message,stack:error.stack,success:!1})),process.exit(1)}