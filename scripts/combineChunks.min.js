const{writeFileSync:writeFileSync,existsSync:existsSync,mkdirSync:mkdirSync}=require("fs"),{createHash:createHash}=require("crypto");function ensureDirectories(){existsSync("./public")||mkdirSync("./public",{recursive:!0}),existsSync("./public/assets")||mkdirSync("./public/assets",{recursive:!0})}let fileType="inventory";const args=process.argv.slice(2);args.includes("--type")&&args.indexOf("--type")+1<args.length&&(fileType=args[args.indexOf("--type")+1]);const filePrefix="catalog"===fileType?"CATALOG_FILE":"INVENTORY_FILE",envFilename="catalog"===fileType?"VITE_CATALOG_FILE":"VITE_INVENTORY_FILE",filename=process.env[envFilename];filename||(console.error(JSON.stringify({error:`Missing environment variable: ${envFilename}`,success:!1})),process.exit(1));try{ensureDirectories();const base64Chunks=[];for(let i=1;i<=6;i++){const chunkEnvVar=`${filePrefix}_CHUNK_${i}`,chunk=process.env[chunkEnvVar];chunk||(console.error(JSON.stringify({error:`Missing chunk: ${chunkEnvVar}`,success:!1})),process.exit(1)),base64Chunks.push(chunk)}const buffers=base64Chunks.map((chunk=>Buffer.from(chunk,"base64"))),combinedBuffer=Buffer.concat(buffers),hash=createHash("sha256").update(combinedBuffer).digest("hex"),outputPath=`./public/assets/${filename}`;writeFileSync(outputPath,combinedBuffer),console.log(JSON.stringify({success:!0,size:combinedBuffer.length,hash:hash,path:outputPath,type:fileType}))}catch(error){console.error(JSON.stringify({error:error.message,success:!1})),process.exit(1)}