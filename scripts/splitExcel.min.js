import{readFileSync,writeFileSync,statSync,mkdirSync,rmSync}from"fs";import sodium from"libsodium-wrappers";import{Octokit}from"@octokit/rest";import{createHash}from"crypto";import{config}from"dotenv";config();const{GITHUB_TOKEN:GITHUB_TOKEN,GITHUB_OWNER:GITHUB_OWNER,GITHUB_REPO:GITHUB_REPO,VITE_EXCEL_FILE:VITE_EXCEL_FILE}=process.env,octokit=new Octokit({auth:GITHUB_TOKEN}),NUM_CHUNKS=6,FILE_PATH=`./data/${VITE_EXCEL_FILE}`,TEMP_DIR="./.temp";async function splitAndEncodeFile(){try{const originalSize=statSync(FILE_PATH).size;if(0===originalSize)throw new Error("‚ùå Error: Excel file is empty");const fileBuffer=readFileSync(FILE_PATH),chunkSize=Math.ceil(fileBuffer.length/6),base64Chunks=[],originalHash=createHash("sha256").update(fileBuffer).digest("hex");console.log(`üîí Original file hash: ${originalHash}`),console.log(`üìä Original file size: ${originalSize} bytes`);const chunks=[];let totalSize=0;for(let i=0;i<6;i++){const start=i*chunkSize,end=Math.min(start+chunkSize,fileBuffer.length),chunk=fileBuffer.subarray(start,end),chunkPath=`${TEMP_DIR}/chunk_${i}`;writeFileSync(chunkPath,chunk);const writtenSize=statSync(chunkPath).size;chunks.push(chunk),totalSize+=chunk.length,console.log(`üì¶ Chunk ${i+1}:`),console.log(`   Size: ${chunk.length} bytes`),console.log(`   Written size: ${writtenSize} bytes`);const secretName=`EXCEL_FILE_CHUNK_${i+1}`,secretValue=Buffer.from(chunk).toString("base64");base64Chunks.push(secretValue);const decodedSize=Buffer.from(secretValue,"base64").length;if(decodedSize!==chunk.length)throw new Error(`Base64 validation failed for chunk ${i+1}! Original: ${chunk.length}, Decoded: ${decodedSize}`);console.log(`   Base64 length: ${secretValue.length}`),console.log("   Decoded size matches: ‚úÖ"),await updateGithubSecret(secretName,secretValue)}const decodedChunks=base64Chunks.map((str=>Buffer.from(str,"base64"))),combinedBuffer=Buffer.concat(decodedChunks),finalHash=createHash("sha256").update(combinedBuffer).digest("hex");if(console.log("\nüîç Final validation:"),console.log(`   Original size: ${originalSize} bytes`),console.log(`   Final size: ${combinedBuffer.length} bytes`),console.log(`   Original hash: ${originalHash}`),console.log(`   Final hash: ${finalHash}`),console.log("   Hashes match: "+(originalHash===finalHash?"‚úÖ":"‚ùå")),totalSize!==originalSize)throw new Error(`Size mismatch after splitting! Original: ${originalSize}, Chunks total: ${totalSize}`);console.log("‚úÖ Successfully split Excel file into 6 chunks"),console.log("üîç Validations passed:"),console.log(`   - Original size: ${originalSize} bytes`),console.log(`   - Total chunks size: ${totalSize} bytes`),console.log("   - All chunks properly base64 encoded"),console.log("üîë Secrets updated on GitHub")}catch(error){try{rmSync(TEMP_DIR,{recursive:!0,force:!0})}catch(cleanupError){console.error("‚ùå Failed to clean up temp directory:",cleanupError)}console.error("‚ùå Error:",error),process.exit(1)}}async function updateGithubSecret(secretName,secretValue){try{const{data:publicKey}=await octokit.actions.getRepoPublicKey({owner:GITHUB_OWNER,repo:GITHUB_REPO}),secretBytes=Buffer.from(secretValue),keyBytes=Buffer.from(publicKey.key,"base64"),encryptedBytes=sodium.crypto_box_seal(secretBytes,keyBytes),encrypted=Buffer.from(encryptedBytes).toString("base64");await octokit.actions.createOrUpdateRepoSecret({owner:GITHUB_OWNER,repo:GITHUB_REPO,secret_name:secretName,encrypted_value:encrypted,key_id:publicKey.key_id}),console.log(`‚úÖ Updated secret: ${secretName}`)}catch(error){throw console.error(`‚ùå Failed to update secret ${secretName}:`,error),error}}const requiredEnvVars=["GITHUB_TOKEN","GITHUB_OWNER","GITHUB_REPO","VITE_EXCEL_FILE"],missingVars=requiredEnvVars.filter((varName=>!process.env[varName]));missingVars.length>0&&(console.error("‚ùå Missing required environment variables:",missingVars.join(", ")),process.exit(1)),mkdirSync(TEMP_DIR,{recursive:!0}),splitAndEncodeFile();