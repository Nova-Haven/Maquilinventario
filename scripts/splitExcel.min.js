import{readFileSync,writeFileSync,statSync,mkdirSync,rmSync}from"fs";import{config}from"dotenv";import{Octokit}from"@octokit/rest";import sodium from"libsodium-wrappers";config();const{GITHUB_TOKEN:GITHUB_TOKEN,GITHUB_OWNER:GITHUB_OWNER,GITHUB_REPO:GITHUB_REPO,VITE_EXCEL_FILE:VITE_EXCEL_FILE}=process.env,octokit=new Octokit({auth:GITHUB_TOKEN}),NUM_CHUNKS=6,FILE_PATH=`./data/${VITE_EXCEL_FILE}`,TEMP_DIR="./.temp";async function splitAndEncodeFile(){try{const originalSize=statSync(FILE_PATH).size;if(0===originalSize)throw new Error("‚ùå Error: Excel file is empty");console.log(`üìä Original file size: ${originalSize} bytes`);const fileBuffer=readFileSync(FILE_PATH),chunkSize=Math.ceil(fileBuffer.length/6),chunks=[];let totalSize=0;for(let i=0;i<6;i++){const start=i*chunkSize,end=Math.min(start+chunkSize,fileBuffer.length),chunk=new Uint8Array(fileBuffer).subarray(start,end);chunks.push(chunk),totalSize+=chunk.length}if(totalSize!==originalSize)throw new Error(`Size mismatch after splitting! Original: ${originalSize}, Chunks total: ${totalSize}`);mkdirSync(TEMP_DIR,{recursive:!0});for(let i=0;i<chunks.length;i++){const chunk=chunks[i],chunkPath=`${TEMP_DIR}/chunk_${i}`;writeFileSync(chunkPath,chunk);const writtenSize=statSync(chunkPath).size;if(writtenSize!==chunk.length)throw new Error(`Chunk ${i} size mismatch! Expected: ${chunk.length}, Got: ${writtenSize}`);const secretName=`EXCEL_FILE_CHUNK_${i+1}`,secretValue=Buffer.from(chunk).toString("base64");if(secretValue.length%4!=0)throw new Error(`Invalid base64 padding in chunk ${i+1}`);await updateGithubSecret(secretName,secretValue)}console.log("‚úÖ Successfully split Excel file into 6 chunks"),console.log("üîç Validations passed:"),console.log(`   - Original size: ${originalSize} bytes`),console.log(`   - Total chunks size: ${totalSize} bytes`),console.log("   - All chunks properly base64 encoded"),console.log("üîë Secrets updated on GitHub")}catch(error){try{rmSync(TEMP_DIR,{recursive:!0,force:!0})}catch(cleanupError){console.error("‚ùå Failed to clean up temp directory:",cleanupError)}console.error("‚ùå Error:",error),process.exit(1)}}async function updateGithubSecret(secretName,secretValue){try{const{data:publicKey}=await octokit.actions.getRepoPublicKey({owner:GITHUB_OWNER,repo:GITHUB_REPO}),secretBytes=Buffer.from(secretValue),keyBytes=Buffer.from(publicKey.key,"base64"),encryptedBytes=sodium.crypto_box_seal(secretBytes,keyBytes),encrypted=Buffer.from(encryptedBytes).toString("base64");await octokit.actions.createOrUpdateRepoSecret({owner:GITHUB_OWNER,repo:GITHUB_REPO,secret_name:secretName,encrypted_value:encrypted,key_id:publicKey.key_id}),console.log(`‚úÖ Updated secret: ${secretName}`)}catch(error){throw console.error(`‚ùå Failed to update secret ${secretName}:`,error),error}}const requiredEnvVars=["GITHUB_TOKEN","GITHUB_OWNER","GITHUB_REPO","VITE_EXCEL_FILE"],missingVars=requiredEnvVars.filter((varName=>!process.env[varName]));missingVars.length>0&&(console.error("‚ùå Missing required environment variables:",missingVars.join(", ")),process.exit(1)),splitAndEncodeFile();