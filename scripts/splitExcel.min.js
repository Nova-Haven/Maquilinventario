import{readFileSync,writeFileSync}from"fs";import{exec}from"child_process";import{promisify}from"util";import{config}from"dotenv";import{platform}from"os";import{Octokit}from"@octokit/rest";import sodium from"libsodium-wrappers";config();const{GITHUB_TOKEN:GITHUB_TOKEN,GITHUB_OWNER:GITHUB_OWNER,GITHUB_REPO:GITHUB_REPO,VITE_EXCEL_FILE:VITE_EXCEL_FILE}=process.env,octokit=new Octokit({auth:GITHUB_TOKEN}),execAsync=promisify(exec),isWindows="win32"===platform(),NUM_CHUNKS=6,FILE_PATH=`./data/${VITE_EXCEL_FILE}`,TEMP_DIR="./.temp",commands={mkdir:isWindows?"mkdir":"mkdir -p",rmrf:isWindows?"rmdir /s /q":"rm -rf",base64:path=>isWindows?`certutil -encode "${path}" temp.b64 && type temp.b64 | findstr /v /c:- && del temp.b64`:`base64 -i "${path}"`};async function splitAndEncodeFile(){try{const fileBuffer=readFileSync(FILE_PATH),chunkSize=Math.ceil(fileBuffer.length/6),chunks=[];for(let i=0;i<6;i++){const start=i*chunkSize,end=Math.min(start+chunkSize,fileBuffer.length);chunks.push(new Uint8Array(fileBuffer).subarray(start,end))}await execAsync(`${commands.mkdir} ${TEMP_DIR}`);const encodingCommands=[];chunks.forEach(((chunk,index)=>{const chunkPath=`${TEMP_DIR}/chunk_${index}`;writeFileSync(chunkPath,chunk);const command=`echo "EXCEL_FILE_CHUNK_${index+1}" && ${commands.base64(chunkPath)}`;encodingCommands.push(command)}));const results=await Promise.all(encodingCommands.map((cmd=>execAsync(cmd))));for(let i=0;i<results.length;i++){const secretName=`EXCEL_FILE_CHUNK_${i+1}`,secretValue=results[i].stdout.trim();await updateGithubSecret(secretName,secretValue)}await execAsync(`${commands.rmrf} ${TEMP_DIR}`),console.log("✅ Successfully split Excel file into 6 chunks")}catch(error){console.error("❌ Error:",error),error.stdout&&console.error("stdout:",error.stdout),error.stderr&&console.error("stderr:",error.stderr),process.exit(1)}}async function updateGithubSecret(secretName,secretValue){try{const{data:publicKey}=await octokit.actions.getRepoPublicKey({owner:GITHUB_OWNER,repo:GITHUB_REPO}),secretBytes=Buffer.from(secretValue),keyBytes=Buffer.from(publicKey.key,"base64"),encryptedBytes=sodium.crypto_box_seal(secretBytes,keyBytes),encrypted=Buffer.from(encryptedBytes).toString("base64");await octokit.actions.createOrUpdateRepoSecret({owner:GITHUB_OWNER,repo:GITHUB_REPO,secret_name:secretName,encrypted_value:encrypted,key_id:publicKey.key_id}),console.log(`✅ Updated secret: ${secretName}`)}catch(error){throw console.error(`❌ Failed to update secret ${secretName}:`,error),error}}const requiredEnvVars=["GITHUB_TOKEN","GITHUB_OWNER","GITHUB_REPO","VITE_EXCEL_FILE"],missingVars=requiredEnvVars.filter((varName=>!process.env[varName]));missingVars.length>0&&(console.error("❌ Missing required environment variables:",missingVars.join(", ")),process.exit(1)),splitAndEncodeFile();